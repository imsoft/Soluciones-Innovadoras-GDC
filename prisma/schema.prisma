// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  password      String?
  accounts      Account[]
  sessions      Session[]
  products      Product[] // Relación con productos
  tickets       Ticket[] // Relación con tickets
  Order         Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Relacionar productos con el usuario que los creó
model Product {
  id             Int             @id @default(autoincrement())
  product        String // Nombre del producto
  price          Float // Precio del producto
  internalSku    String          @unique // SKU interno único para cada producto
  createdAt      DateTime        @default(now()) // Fecha de creación
  updatedAt      DateTime        @updatedAt // Fecha de última actualización
  userId         String // ID del usuario que creó el producto
  createdBy      User            @relation(fields: [userId], references: [id]) // Relación con el usuario
  ticketProducts TicketProduct[] // Relación con TicketProduct (productos dentro de un ticket)
  orderProducts  OrderProduct[] // Relación con OrderProduct (nuevo)
}

// Tabla intermedia para relacionar productos con tickets y almacenar la cantidad de productos
model TicketProduct {
  id        Int     @id @default(autoincrement())
  productId Int // Relación con el producto
  ticketId  Int // Relación con el ticket
  quantity  Int // Cantidad del producto en el ticket
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  ticket    Ticket  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

// Modelo de tickets para rastrear los tickets enviados
model Ticket {
  id             Int             @id @default(autoincrement())
  subject        String // Asunto del ticket
  content        String // Contenido o descripción del ticket
  sentAt         DateTime        @default(now()) // Fecha en la que se envió el ticket
  userId         String // ID del usuario que envió el ticket
  recipient      String // Correo electrónico del destinatario
  totalAmount    Float // Monto total del ticket
  user           User            @relation(fields: [userId], references: [id]) // Relación con el usuario
  ticketProducts TicketProduct[] // Relación con los productos dentro del ticket
}

// Modelo para manejar los pedidos
model Order {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  totalAmount   Float // Monto total del pedido
  customerEmail String // Correo del cliente
  userId        String // ID del usuario que creó el pedido
  createdBy     User           @relation(fields: [userId], references: [id]) // Relación con el usuario que creó el pedido
  orderProducts OrderProduct[] // Relación con los productos dentro del pedido (nuevo)
}

// Tabla intermedia para relacionar productos con pedidos y almacenar la cantidad de productos
model OrderProduct {
  id        Int     @id @default(autoincrement())
  productId Int // Relación con el producto
  orderId   Int // Relación con el pedido
  quantity  Int // Cantidad del producto en el pedido
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
